# -*- coding: utf-8 -*-
"""A1_13_Prac8_DL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z2Nx_9JIhsZvzP3sl8-dzg19A7kD_UTF

### Name: Radhika Shukla
### Batch: A1
### Roll No.: 13
### PRACTICAL - 08
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping

# Parameters
input_size = 784  # 28 x 28 pixels flattened
code_size = 32    # Bottleneck size (latent representation)

# Load dataset
(x_train, _), (x_test, _) = mnist.load_data()

# Normalize and flatten the data
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.

x_train = x_train.reshape((len(x_train), input_size))
x_test = x_test.reshape((len(x_test), input_size))

# Encoder
input_img = Input(shape=(input_size,))
hidden_1 = Dense(256, activation='relu')(input_img)
hidden_2 = Dense(128, activation='relu')(hidden_1)
hidden_3 = Dense(64, activation='relu')(hidden_2)
code = Dense(code_size, activation='relu')(hidden_3)

# Decoder
hidden_4 = Dense(64, activation='relu')(code)
hidden_5 = Dense(128, activation='relu')(hidden_4)
hidden_6 = Dense(256, activation='relu')(hidden_5)
output_img = Dense(input_size, activation='sigmoid')(hidden_6)

# Model
autoencoder = Model(input_img, output_img)
autoencoder.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy')

# Early stopping to prevent overfitting
early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

# Train
autoencoder.fit(x_train, x_train,
                epochs=50,
                batch_size=256,
                shuffle=True,
                validation_data=(x_test, x_test),
                callbacks=[early_stop])

# Predict reconstructed images
decoded_imgs = autoencoder.predict(x_test)

def display_images(original, reconstructed, n=10):
    plt.figure(figsize=(20, 4))
    for i in range(n):
        # Original image
        ax = plt.subplot(2, n, i + 1)
        plt.imshow(original[i].reshape(28, 28), cmap='gray')
        plt.title("Original")
        plt.axis('off')

        # Reconstructed image
        ax = plt.subplot(2, n, i + 1 + n)
        plt.imshow(reconstructed[i].reshape(28, 28), cmap='gray')
        plt.title("Reconstructed")
        plt.axis('off')
    plt.tight_layout()
    plt.show()

# Show images
display_images(x_test, decoded_imgs)

